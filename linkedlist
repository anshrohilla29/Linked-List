#include<iostream>
using namespace std;

class Node {
    public:
        int data; // data for storing the value of the node
        Node* next; //storing the address of the next node

        Node(int d) {
            data = d;
            next = NULL;
        } 
};

class List{
    Node* head;
    Node* tail;

    public:
    List(){
        head = NULL;
        tail = NULL;
    } 

    void push_front(int val){
        Node* newNode = new Node(val); // dynamic object creation
        if(head == NULL){
            head = newNode;
            tail = newNode;
            return;
        }else{
            newNode->next = head; // this pointer 
            head = newNode;
        }
    }

    void push_back(int val){
        Node* newNode = new Node(val);
        if(head == NULL){
            head = newNode;
            tail = newNode;
        }else{
        tail->next = newNode;
        tail = newNode;
    }
}

    void pop_front(){
        if(head == NULL){
            cout<<"List is empty"<<endl;
            return;
        }
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    void pop_back(){
        if(head == NULL){
            cout<<"List is empty"<<endl;
            return;
        }
        if(head->next == NULL){
            delete head;
            head = NULL;
            tail = NULL;
            return;
        }
        Node* temp = head;
        while(temp->next != tail){
            temp = temp->next;
        }
        temp->next = NULL;
        delete tail;
        tail = temp;
    }

    void insert(int val, int pos){
        if(pos<0){
            cout<<"Position cannot be negative"<<endl;
            return;
        }
        if(pos == 0){
            push_front(val);
            return;
        }
        Node* newNode = new Node(val);
        Node* temp = head;
        for(int i=0; i<pos-1 && temp!=NULL; i++){
            temp = temp->next;
        }
        if(temp == NULL){
            cout<<"Position out of bounds"<<endl;
            delete newNode;
            return;
        }
        newNode->next = temp->next;
        temp->next = newNode;
    }

    void printLL(){
        Node* temp = head;
        while(temp!= NULL){
            cout<<temp->data<<"->";
            temp = temp->next;
        }
        cout<<"NULL"<<endl;
    }
};  
int main(){
    List l;
    l.push_front(3);
    l.push_front(2);
    l.push_front(1);
    l.insert(4, 2);
    l.printLL();
    return 0;
}
